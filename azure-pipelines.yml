# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master develop

pool:
  name: 'home-lab-build-docker'

steps:
# - bash: echo TRAEFIK_NETWORK=proxy >> $(Build.StagingDirectory)/environment.env
# - bash: echo TRAEFIK_ENTRY_POINT=$(TRAEFIK_ENTRY_POINT) >> $(Build.StagingDirectory)/environment.env
# - bash: echo TRAEFIK_ENTRY_POINT_PORT=$(TRAEFIK_ENTRY_POINT_PORT) >> $(Build.StagingDirectory)/environment.env
# - bash: echo TZ=Europe/Brussels >> $(Build.StagingDirectory)/environment.env
# - bash: echo DOMAIN_NAME=$(VS_DOMAIN_NAME) >> $(Build.StagingDirectory)/environment.env
# - bash: echo DOCKER_VOL_MOUNT=$(DOCKER_VOL_MOUNT) >> $(Build.StagingDirectory)/environment.env
# - bash: echo PATH_P_TV_SHOWS=$(PATH_P_TV_SHOWS) >> $(Build.StagingDirectory)/environment.env
# - bash: echo PATH_P_MOVIES=$(PATH_P_MOVIES) >> $(Build.StagingDirectory)/environment.env
# - bash: echo PATH_DOWNLOADS=$(PATH_DOWNLOADS) >> $(Build.StagingDirectory)/environment.env
# - bash: echo PATH_LYCHEE=$(PATH_LYCHEE) >> $(Build.StagingDirectory)/environment.env
# - bash: echo ACME_MAIL=$(ACME_MAIL) >> $(Build.StagingDirectory)/environment.env
# - bash: echo PLEX_CLAIM=$(PLEX_CLAIM) >> $(Build.StagingDirectory)/environment.env
# - bash: echo TRAEFIK_NETWORK=proxy >> $(Build.StagingDirectory)/environment.env
- bash: rm environment.env
- bash: echo TRAEFIK_ENTRY_POINT=$(TRAEFIK_ENTRY_POINT) >> environment.env
- bash: echo TRAEFIK_ENTRY_POINT_PORT=$(TRAEFIK_ENTRY_POINT_PORT) >> environment.env
- bash: echo TZ=Europe/Brussels >> environment.env
- bash: echo DOMAIN_NAME=$(VS_DOMAIN_NAME) >> environment.env
- bash: echo DOCKER_VOL_MOUNT=$(DOCKER_VOL_MOUNT) >> environment.env
- bash: echo PATH_P_TV_SHOWS=$(PATH_P_TV_SHOWS) >> environment.env
- bash: echo PATH_P_MOVIES=$(PATH_P_MOVIES) >> environment.env
- bash: echo PATH_DOWNLOADS=$(PATH_DOWNLOADS) >> environment.env
- bash: echo PATH_LYCHEE=$(PATH_LYCHEE) >> environment.env
- bash: echo ACME_MAIL=$(ACME_MAIL) >> environment.env
- bash: echo PLEX_CLAIM=$(PLEX_CLAIM) >> environment.env
- bash: echo COMPOSE_PROJECT_NAME=frankenbuild_lab_ >> environment.env
- bash: cat  environment.env
- bash: pwd
  displayName: Docker Compose Config
# - task: DockerCompose@0
#   displayName: Kill the running setup
#   inputs:
#     containerregistrytype: 'Container Registry'
#     dockerComposeFile: '**/docker-compose.yml'
#     action: 'Run a Docker Compose command'
#     dockerComposeCommand: 'down'
- task: DockerCompose@0
  displayName: Deploy the Mediaserver in Lab
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: '**/docker-compose.yml'
    additionalDockerComposeFiles: |
      management/portainer.yml
      management/heimdall.yml
      PVR/sonarr.yml
      PVR/radarr.yml
      mediaserver/plex.yml
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'up -d --remove-orphans'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'docker-media-server'
    publishLocation: 'pipeline'


    
